# Docker installation and configuration
---
- name: Remove old Docker versions
  package:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent
  tags: [docker, cleanup]

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  when: ansible_os_family == "Debian"
  tags: [docker, repository]

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
  when: ansible_os_family == "Debian"
  tags: [docker, repository]

- name: Update package cache after adding Docker repo
  apt:
    update_cache: yes
  when: ansible_os_family == "Debian"
  tags: [docker, packages]

- name: Install Docker CE
  package:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
  tags: [docker, packages]

- name: Reload systemd daemon
  systemd:
    daemon_reload: true
  ignore_errors: true
  tags: [docker, service]

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: true
  register: docker_service_result
  ignore_errors: true
  tags: [docker, service]

- name: Check if running in CI environment
  set_fact:
    is_ci_environment: "{{ ansible_env.CI is defined or ansible_env.GITHUB_ACTIONS is defined }}"
  tags: [docker, service]

- name: Alternative Docker service start (if systemd fails)
  shell: |
    if [ "{{ is_ci_environment }}" = "True" ]; then
      # In CI environments, start Docker daemon directly
      nohup /usr/bin/dockerd --config-file=/etc/docker/daemon.json --host=unix:///var/run/docker.sock > /var/log/docker.log 2>&1 &
      sleep 15
    else
      # Try service command first, then fall back to direct daemon start
      service docker start || {
        nohup /usr/bin/dockerd --config-file=/etc/docker/daemon.json > /var/log/docker.log 2>&1 &
        sleep 10
      }
    fi
  when: docker_service_result.failed | default(false)
  tags: [docker, service]

- name: Wait for Docker socket to be ready
  wait_for:
    path: /var/run/docker.sock
    timeout: 30
  ignore_errors: true
  tags: [docker, service]

- name: Alternative check - verify Docker socket
  stat:
    path: /var/run/docker.sock
  register: docker_socket
  tags: [docker, service]

- name: Ensure Docker socket permissions
  file:
    path: /var/run/docker.sock
    mode: '0666'
  when: docker_socket.stat.exists | default(false)
  ignore_errors: true
  tags: [docker, service]

- name: Add users to docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
  loop: "{{ docker_users }}"
  tags: [docker, users]

- name: Install Docker Compose (standalone)
  get_url:
    url: "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: '0755'
  tags: [docker, compose]

- name: Verify Docker installation
  command: docker --version
  register: docker_version
  changed_when: false
  tags: [docker, verification]

- name: Test Docker functionality
  command: docker info
  register: docker_info
  ignore_errors: true
  changed_when: false
  tags: [docker, verification]

- name: Display Docker status
  debug:
    msg: 
      - "Docker version: {{ docker_version.stdout }}"
      - "Docker daemon status: {{ 'Running' if docker_info.rc == 0 else 'Not Running' }}"
  tags: [docker, verification]

- name: Configure Docker daemon
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: restart docker
  tags: [docker, configuration]